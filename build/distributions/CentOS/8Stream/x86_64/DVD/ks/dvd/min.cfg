cdrom
text
keyboard --vckeymap=us --xlayouts='us'
lang en_US.UTF-8
services --enabled=network,firewalld,sssd,rsyslog,sshd --disabled=NetworkManager
%include /mnt/install/repo/ks/dvd/include/common_ks_base
%include /mnt/install/repo/ks/dvd/include/min_ks_base

%pre

cd /mnt
# /mnt/source is used in the scripts to be compatable with other dvds
# Make sure the Centos 8 source is mounted to /mnt/source
if [ -b /dev/cdrom ]; then
  if [ ! -d "$SOURCE" ]; then
    mkdir "$SOURCE";
  fi
  if [ ! -d "$SOURCE/BaseOS" ]; then
    mount --bind /mnt/install/repo $SOURCE;
  fi
fi

cp /mnt/install/repo/ks/repodetect.sh /tmp;
cp /mnt/install/repo/ks/diskdetect.sh /tmp;

chmod +x /tmp/*.sh

/tmp/repodetect.sh '8'
/tmp/diskdetect.sh

# Prep for selecting the correct dracut to install
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" == "0" ]; then
  echo 'dracut' > /tmp/dracut_packages
else
  echo 'dracut-fips' > /tmp/dracut_packages
fi
%end

%post --nochroot --erroronfail --log=/mnt/sysimage/var/log/anaconda/ks-post-nochroot.log

# SOURCE is the DVD; SYSIMAGE is the chroot'd root dir
SOURCE="/mnt/source"
SYSIMAGE="/mnt/sysimage"

# bind mounts don't keep through reboots so make sure
# the dvd is mounted to /mnt/source
if [ -b /dev/cdrom ]; then
  if [ ! -d "$SOURCE" ]; then
    mkdir "$SOURCE";
  fi
  if [ ! -d "$SOURCE/BaseOS" ]; then
    mount --bind /mnt/install/repo $SOURCE;
  fi
fi

# If we dropped a LUKS key-file, we need to copy it into place.
if [ -f /boot/disk_creds ]; then
  cp /boot/disk_creds $SYSIMAGE/etc/.cryptcreds
  chown root:root $SYSIMAGE/etc/.cryptcreds
  chmod 400 $SYSIMAGE/etc/.cryptcreds

  crypt_disk=`cat /boot/crypt_disk`
  for x in /dev/$crypt_disk*; do
    if `cryptsetup isLuks $x`; then
      crypt_partition="$x"
      break
    fi
  done

  if [ -z "$crypt_partition" ]; then
    echo "Error: Could not find the encrypted partition"
    exit 1
  fi

  exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
  chvt 6

  echo "Updating the LUKS keys, this may take some time...."

  # We need to make sure our keyfile lands in slot 0 and EL6 doesn't have the
  # luksChangeKey command
  cryptsetup luksAddKey --key-slot 1 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 0

  cryptsetup luksAddKey --key-slot 0 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 1

  # Modify the crypttab file
  crypt_uuid=`cryptsetup luksDump ${crypt_partition} | grep UUID | sed 's/[[:space:]]\+/ /g' | cut -f2 -d' '`

  chvt 1
  exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

  # If we got here, and this is blank, fail hard!
  if [ -z "$crypt_uuid" ]; then
    echo "Error: Could not find crypt_uuid"
    exit 1
  fi

  echo "luks-${crypt_uuid} UUID=${crypt_uuid} /etc/.cryptcreds luks" > $SYSIMAGE/etc/crypttab
fi
%end

%post --log=/var/log/anaconda/ks-post.log

# FIPS
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" != "0" ]; then
  BOOTDEV=`df /boot | tail -1 | cut -f1 -d' '`

  # In case you need a working fallback
  DEFAULT_KERNEL_INFO=`/sbin/grubby --default-kernel`
  DEFAULT_INITRD=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep initrd | cut -f2 -d'='`
  DEFAULT_KERNEL_TITLE=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep -m1 title | cut -f2 -d'='`
  /sbin/grubby --copy-default --make-default --args="boot=${BOOTDEV} fips=1" --add-kernel=`/sbin/grubby --default-kernel` --initrd=${DEFAULT_INITRD} --title="FIPS ${DEFAULT_KERNEL_TITLE}"
fi

# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo 'install_items+="/etc/.cryptcreds"' >> /etc/dracut.conf
fi

for x in `ls -d /lib/modules/*`; do
  installed_kernel=`basename $x`
  dracut -f "/boot/initramfs-${installed_kernel}.img" $installed_kernel
done

sed -i 's/--class os/--class os --unrestricted/g' /boot/grub2/grub.cfg

pass_hash='$6$5SnplwrFxmHy4j/v$WgcZV1.W6/wQq1SJh/gnV7E5Tr1iIuJgdCFmhdlzHnCdWR927Q/Q4eKZXtFAVOY7eNRb3e30ezM5xbmP8G7t50'

groupadd -g 1777 simp >& /dev/null;
useradd -d /var/local/simp -g simp -m -p $pass_hash -s /bin/bash -u 1777 -K PASS_MAX_DAYS=90 -K PASS_MIN_DAYS=1 -K PASS_WARN_AGE=7 simp >& /dev/null;
usermod -aG wheel simp;
chage -d 0 root;
chage -d 0 simp;

pam_mod="password     requisite     pam_cracklib.so try_first_pass difok=4 retry=3 minlen=14 minclass=3 maxrepeat=2 maxsequence=4 dcredit=-1 ucredit=-1 lcredit=-1 ocredit=-1 gecoscheck reject_username enforce_for_root\n"
for auth_file in password system; do
  if [ -f /etc/pam.d/${auth_file}-auth ] && [ ! `grep -q 'Puppet' /etc/pam.d/${auth_file}-auth` ]; then
    # Remove the items that will double prompt us out of the box
    sed -i "/pam_\(pwquality\|cracklib\).so/d" /etc/pam.d/${auth_file}-auth
    # Add our cracklib line
    sed -i "s/\(password.*pam_unix.so.*\)/${pam_mod}\1/" /etc/pam.d/${auth_file}-auth
  fi
done
%end
